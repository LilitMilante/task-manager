// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/task/v1/todolist.proto

package todolistv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "task-manager/gen/proto/task/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TaskServiceName is the fully-qualified name of the TaskService service.
	TaskServiceName = "proto.task.v1.TaskService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TaskServiceAddTaskProcedure is the fully-qualified name of the TaskService's AddTask RPC.
	TaskServiceAddTaskProcedure = "/proto.task.v1.TaskService/AddTask"
	// TaskServiceTaskByIDProcedure is the fully-qualified name of the TaskService's TaskByID RPC.
	TaskServiceTaskByIDProcedure = "/proto.task.v1.TaskService/TaskByID"
	// TaskServiceUpdateTaskProcedure is the fully-qualified name of the TaskService's UpdateTask RPC.
	TaskServiceUpdateTaskProcedure = "/proto.task.v1.TaskService/UpdateTask"
	// TaskServiceDeleteTaskProcedure is the fully-qualified name of the TaskService's DeleteTask RPC.
	TaskServiceDeleteTaskProcedure = "/proto.task.v1.TaskService/DeleteTask"
	// TaskServiceTasksProcedure is the fully-qualified name of the TaskService's Tasks RPC.
	TaskServiceTasksProcedure = "/proto.task.v1.TaskService/Tasks"
)

// TaskServiceClient is a client for the proto.task.v1.TaskService service.
type TaskServiceClient interface {
	AddTask(context.Context, *connect.Request[v1.AddTaskRequest]) (*connect.Response[v1.AddTaskResponse], error)
	TaskByID(context.Context, *connect.Request[v1.TaskByIDRequest]) (*connect.Response[v1.TaskByIDResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	Tasks(context.Context, *connect.Request[v1.TasksRequest]) (*connect.Response[v1.TasksResponse], error)
}

// NewTaskServiceClient constructs a client for the proto.task.v1.TaskService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTaskServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TaskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &taskServiceClient{
		addTask: connect.NewClient[v1.AddTaskRequest, v1.AddTaskResponse](
			httpClient,
			baseURL+TaskServiceAddTaskProcedure,
			opts...,
		),
		taskByID: connect.NewClient[v1.TaskByIDRequest, v1.TaskByIDResponse](
			httpClient,
			baseURL+TaskServiceTaskByIDProcedure,
			opts...,
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.UpdateTaskResponse](
			httpClient,
			baseURL+TaskServiceUpdateTaskProcedure,
			opts...,
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+TaskServiceDeleteTaskProcedure,
			opts...,
		),
		tasks: connect.NewClient[v1.TasksRequest, v1.TasksResponse](
			httpClient,
			baseURL+TaskServiceTasksProcedure,
			opts...,
		),
	}
}

// taskServiceClient implements TaskServiceClient.
type taskServiceClient struct {
	addTask    *connect.Client[v1.AddTaskRequest, v1.AddTaskResponse]
	taskByID   *connect.Client[v1.TaskByIDRequest, v1.TaskByIDResponse]
	updateTask *connect.Client[v1.UpdateTaskRequest, v1.UpdateTaskResponse]
	deleteTask *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
	tasks      *connect.Client[v1.TasksRequest, v1.TasksResponse]
}

// AddTask calls proto.task.v1.TaskService.AddTask.
func (c *taskServiceClient) AddTask(ctx context.Context, req *connect.Request[v1.AddTaskRequest]) (*connect.Response[v1.AddTaskResponse], error) {
	return c.addTask.CallUnary(ctx, req)
}

// TaskByID calls proto.task.v1.TaskService.TaskByID.
func (c *taskServiceClient) TaskByID(ctx context.Context, req *connect.Request[v1.TaskByIDRequest]) (*connect.Response[v1.TaskByIDResponse], error) {
	return c.taskByID.CallUnary(ctx, req)
}

// UpdateTask calls proto.task.v1.TaskService.UpdateTask.
func (c *taskServiceClient) UpdateTask(ctx context.Context, req *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// DeleteTask calls proto.task.v1.TaskService.DeleteTask.
func (c *taskServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// Tasks calls proto.task.v1.TaskService.Tasks.
func (c *taskServiceClient) Tasks(ctx context.Context, req *connect.Request[v1.TasksRequest]) (*connect.Response[v1.TasksResponse], error) {
	return c.tasks.CallUnary(ctx, req)
}

// TaskServiceHandler is an implementation of the proto.task.v1.TaskService service.
type TaskServiceHandler interface {
	AddTask(context.Context, *connect.Request[v1.AddTaskRequest]) (*connect.Response[v1.AddTaskResponse], error)
	TaskByID(context.Context, *connect.Request[v1.TaskByIDRequest]) (*connect.Response[v1.TaskByIDResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	Tasks(context.Context, *connect.Request[v1.TasksRequest]) (*connect.Response[v1.TasksResponse], error)
}

// NewTaskServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTaskServiceHandler(svc TaskServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	taskServiceAddTaskHandler := connect.NewUnaryHandler(
		TaskServiceAddTaskProcedure,
		svc.AddTask,
		opts...,
	)
	taskServiceTaskByIDHandler := connect.NewUnaryHandler(
		TaskServiceTaskByIDProcedure,
		svc.TaskByID,
		opts...,
	)
	taskServiceUpdateTaskHandler := connect.NewUnaryHandler(
		TaskServiceUpdateTaskProcedure,
		svc.UpdateTask,
		opts...,
	)
	taskServiceDeleteTaskHandler := connect.NewUnaryHandler(
		TaskServiceDeleteTaskProcedure,
		svc.DeleteTask,
		opts...,
	)
	taskServiceTasksHandler := connect.NewUnaryHandler(
		TaskServiceTasksProcedure,
		svc.Tasks,
		opts...,
	)
	return "/proto.task.v1.TaskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TaskServiceAddTaskProcedure:
			taskServiceAddTaskHandler.ServeHTTP(w, r)
		case TaskServiceTaskByIDProcedure:
			taskServiceTaskByIDHandler.ServeHTTP(w, r)
		case TaskServiceUpdateTaskProcedure:
			taskServiceUpdateTaskHandler.ServeHTTP(w, r)
		case TaskServiceDeleteTaskProcedure:
			taskServiceDeleteTaskHandler.ServeHTTP(w, r)
		case TaskServiceTasksProcedure:
			taskServiceTasksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTaskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTaskServiceHandler struct{}

func (UnimplementedTaskServiceHandler) AddTask(context.Context, *connect.Request[v1.AddTaskRequest]) (*connect.Response[v1.AddTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.task.v1.TaskService.AddTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) TaskByID(context.Context, *connect.Request[v1.TaskByIDRequest]) (*connect.Response[v1.TaskByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.task.v1.TaskService.TaskByID is not implemented"))
}

func (UnimplementedTaskServiceHandler) UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.task.v1.TaskService.UpdateTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.task.v1.TaskService.DeleteTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) Tasks(context.Context, *connect.Request[v1.TasksRequest]) (*connect.Response[v1.TasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.task.v1.TaskService.Tasks is not implemented"))
}
